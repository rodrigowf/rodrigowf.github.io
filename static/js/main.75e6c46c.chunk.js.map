{"version":3,"sources":["AppStyle.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Index","loadable","Promise","all","__webpack_require__","e","then","bind","Jewc","Pulsar","Interpoli","routes","path","label","component","icon","react_default","a","createElement","Dashboard_default","exact","App","classes","react_router_dom","className","CssBaseline","content","toolbar","map","route","index","react_router","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sOAceA,EAZGC,YAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,+BCLZK,EAAQC,YAAS,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aACvBC,EAAOP,YAAS,kBAAMG,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aACtBE,EAASR,YAAS,kBAAMG,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,aACxBG,EAAYT,YAAS,kBAAMG,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aA2BlBI,EAzBA,CACX,CACIC,KAAM,IACNC,MAAO,QACPC,UAAWd,EACXe,KAAMC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,MACNG,OAAO,GAEX,CACIR,KAAM,iBACNE,UAAWN,EACXY,OAAO,GAEX,CACIR,KAAM,mBACNE,UAAWL,EACXW,OAAO,GAEX,CACIR,KAAM,sBACNE,UAAWJ,EACXU,OAAO,ICDAC,MArBf,WACE,IAAMC,EAAU/B,IAEhB,OACEyB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQC,UAAWF,EAAQ5B,MACzBsB,EAAAC,EAAAC,cAACO,EAAA,EAAD,MACAT,EAAAC,EAAAC,cAAA,QAAMM,UAAWF,EAAQI,SACvBV,EAAAC,EAAAC,cAAA,OAAKM,UAAWF,EAAQK,UACvBhB,EAAOiB,IAAI,SAACC,EAAOC,GAAR,OACRd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACIC,IAAKF,EACLlB,KAAMiB,EAAMjB,KACZQ,MAAOS,EAAMT,MACbN,UAAWe,EAAMf,iBCVbmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.75e6c46c.chunk.js","sourcesContent":["import {makeStyles} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default useStyles;","import React from 'react';\nimport loadable from '@loadable/component'\n\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\n\nconst Index = loadable(() => import('./pages/Index'));\nconst Jewc = loadable(() => import('./Projects/Jewc/Jewc'));\nconst Pulsar = loadable(() => import('./Projects/Pulsar/Pulsar'));\nconst Interpoli = loadable(() => import('./Projects/Interpoli/Interpoli'));\n\nconst routes = [\n    {\n        path: \"/\",\n        label: 'Index',\n        component: Index,\n        icon: <DashboardIcon />,\n        exact: true,\n    },\n    {\n        path: \"/sistemas/jewc\",\n        component: Jewc,\n        exact: false,\n    },\n    {\n        path: \"/sistemas/pulsar\",\n        component: Pulsar,\n        exact: false,\n    },\n    {\n        path: \"/sistemas/interpoli\",\n        component: Interpoli,\n        exact: false,\n    },\n];\n\nexport default routes","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport useStyles from './AppStyle';\n\nimport routes from './routes';\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <Router className={classes.root}>\n      <CssBaseline />\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {routes.map((route, index) => (\n            <Route\n                key={index}\n                path={route.path}\n                exact={route.exact}\n                component={route.component}\n            />\n        ))}\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}